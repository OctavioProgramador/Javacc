options {
	STATIC = false;
}
PARSER_BEGIN(lexico)
	import java.io.PrintStream;
	class lexico {
		public static void main (String [] args)
		throws ParseException, TokenMgrError{
			lexico parser = new lexico( System.in);
			parser.Start(System.out); }
	}
PARSER_END(lexico)
SKIP : { "\t"| "\r" | "\r\n" | "\n" | " "}
TOKEN: {<Asignacion: "="> {printStream.println("Asignacion");}}
TOKEN: { <OperadorRelacional: "==" | "!="  | ">"  | "<"  | "=>" |  "<=" > {printStream.println("OperadorRelacional ("+t.image+")");}}
TOKEN: { <Parentesis: "(" | ")">{printStream.println("Parentesis ("+t.image+")");}}
TOKEN: { <Corchete: "["  | "]">{printStream.println("Corchete ("+t.image+")");}}
TOKEN: { <Comentario: "/*" | "*/" |  "//"> {printStream.println("Comentario ("+t.image+")");}}
TOKEN: { OperadorAritmetico: "++" | "--" > {printStream.println("OperadorAritmetico ("+t.image+")");}}
TOKEN : { < OperadorAritmeticoBinario :  "+" | "-" | "*" | "/" | "*=" | "+=" | "-=" | "*=" | "/=" > {printStream.println("OperadorAritmeticoBinario ("+t.image+")");}}
TOKEN : { < FuncionMatematica : "sqrt" > {printStream.println("FuncionMatematica ("+t.image+")");}}
TOKEN : { < OperadoresLogicos : "&&" | "||" | "XOR" > {printStream.println("OperadoresLogicos ("+t.image+")");}}
TOKEN : { < Llaves : "{" | "}" > {printStream.println("Llaves ("+t.image+")");}}
TOKEN : { < ReferenciasPunteros : "this" | "&" > {printStream.println("ReferenciasPunteros ("+t.image+")");}}
TOKEN : { < NUMBER : (["0"-"9"])+ > {printStream.println("Numero ("+t.beginLine+", "+t.beginColumn+")");}}
TOKEN : { < #WORDMIN : (["a"-"z"])+>}
TOKEN : { < #WORDMAYUS : (["A"-"Z"])+>}
TOKEN : { < #WORD : (<WORDMIN>|<WORDMAYUS>)+ > } 
TOKEN : { < #SPECIAL : "_" | "@" | "." > }
TOKEN : { < IDENTIFIER : (<WORD>)+(<NUMBER>|<NUMBER>|<SPECIAL>)* > {printStream.println("Identificador ("+t.beginLine+", "+t.beginColumn+")");}}

void Start(PrintStream printStream) throws NumberFormatException:
{}
{
	(<IDENTIFIER>|<NUMBER>|<Asignacion>|<OperadorAritmeticoBinario>|<OperadoresLogicos>|<FuncionMatematica>|<OperadorRelacional>|<Parentesis>|<Corchete>|<Comentario>|<OperadorAritmetico>)*	
	<EOF>
}

