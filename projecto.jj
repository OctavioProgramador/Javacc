options {
	STATIC = false;
}

PARSER_BEGIN(lexico)
	import java.io.PrintStream;
	class lexico {
		public static void main (String [] args)
		throws ParseException, TokenMgrError{
			lexico parser = new lexico( System.in);
			parser.Start(System.out); }
	}
PARSER_END(lexico)

SKIP : { "\t"| "\r" | "\r\n" | "\n" | " "}
TOKEN : { < Asignacion: "="> {System.out.println("Asignacion");}}
TOKEN : { < OperadorRelacional: "==" | "!="  | ">"  | "<"  | "=>" |  "<=" >
	{System.out.println("OperadorRelacional ( "+image+")" );}}
TOKEN : { < Parentesis: "(" | ")">{System.out.println("Parentesis ( "+image+" )");}}
TOKEN : { < Corchete: "["  | "]">{System.out.println("Corchete ( "+image+" )");}}
TOKEN : { < Comentario: "/*" | "*/" |  "//"> {System.out.println("Comentario ( "+image+" )");}}
TOKEN : { < OperadorAritmetico: "++" | "--" > {System.out.println("OperadorAritmetico ( "+image+")" );}}
TOKEN : { < OperadorAritmeticoBinario :  "+" | "-" | "*" | "/" | "*=" | "+=" | "-=" | "*=" | "/=" >
	{System.out.println("OperadorAritmeticoBinario ( "+image+" )");}}
TOKEN : { < FuncionMatematica : "sqrt" > {System.out.println("FuncionMatematica ( "+image+" )");}}
TOKEN : { < OperadoresLogicos : "&&" | "||" | "XOR" >
	{System.out.println("OperadoresLogicos ( "+image+" )");}}
TOKEN : { < Llaves : "{" | "}" > {System.out.println("Llaves ( "+image+" )");}}
TOKEN : { < ReferenciasPunteros : "this" | "&" > {System.out.println("ReferenciasPunteros ( "+image+") ");}}
TOKEN : { < NUMBER : (["0"-"9"])+ >}
TOKEN : { < #WORDMIN : (["a"-"z"])+>}
TOKEN : { < #WORDMAYUS : (["A"-"Z"])+>}
TOKEN : { < #WORD : (<WORDMIN>|<WORDMAYUS>)+ > }
TOKEN : { < #SPECIAL : "_" | "@" | "." > }
TOKEN : { < IDENTIFIER : (<WORD>)+(<NUMBER>|<NUMBER>|<SPECIAL>)* >}
TOKEN : { < Coma : "," > {System.out.println("Coma");}}
TOKEN : { < Rango : ":" > {System.out.println("Rango");}}
TOKEN : { < DirectivasDePreprocesador : "#include"|"#define"|"#endif" >
	{System.out.println("DirectivaDePreprocesador ( "+image+" )");}}
TOKEN : { < SentenciaIF : "if"|"else"> {System.out.println("Sentencia ( "+image+" )");}}
TOKEN : { < FuncionesPredefinidas : "how"|"map"|"zip"|"filter"|"foldr"|"foldl"|"lenght"|"head"|"fst"|"snd"|"tail"|"id"|"show"|"where"|"iter"|"next"|"list"|"tuple"|"max"|"min"|"values"|"dict"|"sum"|"sorted"|"any"|"all"|"count"|"range"|" cycle"|" reperat"|"chain"|"tee"|"islice"|"filterfalse"|"takewhile" >{System.out.println("FuncionPredefinida ( "+image+" )");}}
TOKEN: {<ReferenciaApuntador: "&" | "this">{System.out.println("ReferenciaApuntador");}}
TOKEN: {<TipoDeDato: "int" | "char" | "string" | "bool" | "decimal" | "void" | "long"| "double" | "data" | "function" | "float" | "byte" | "sbyte" | "short" | "ushort" | "int16" | "int64" | "ulong" | "uint" | "nint" > {printStream.println("Tipo de Dato ("+image+")");}}
TOKEN: {<AccesoAElementos: "." | "->">{System.out.println("AccesoAElementos ( "+imag +" )");}}
TOKEN: {<FinDeLinea: ";">{printStream.println("FinDeLinea");} }
TOKEN: {<Comillas: "\""| "\'">{printStream.println("Comillas");}}

TOKEN:{<Estructura: "struct">{System.out.println("Estructura");}}
TOKEN:{<Using: "using">{System.out.println("Using");}}
TOKEN:{<Extends:"extends">{System.out.println("extends");}}
TOKEN:{<Package:"package">{System.out.println("Package");}}
TOKEN:{<Global:"global">{System.out.println("Global");}}
TOKEN:{<Join:"join">{System.out.println("Join");}}
TOKEN:{<Lock:"lock">{System.out.println("Lock");}}
TOKEN:{<Dllexport:"dllexport" | | >{System.out.println("Dllexport");}}
TOKEN:{<Dllimport: "dllimport" >{System.out.println("Dllimport");}}
TOKEN:{<Extern: "extern">{System.out.println("extern");}}
TOKEN:{<Noreturn:"noreturn">{System.out.println("noreturn");}}
TOKEN:{<Def:"def">{System.out.println("Def");}}
TOKEN:{<Del: "del">{System.out.println("Del");}}
TOKEN:{<None: "none">{System.out.println("None");}}
TOKEN:{<Elif: "elif">{System.out.println("Elif");}}
TOKEN:{<Nolocal: "nolocal">{System.out.println("Nolocal");}}
TOKEN:{<Equals: "equals">{System.out.println("Equals");}}
TOKEN:{<OperadorDeConversion: "reinterpret_cast" | "dynamic_cast">{System.out.println("OperadorDeConversion ( "+image+") ");}}
TOKEN:{<Delete: "delete">{System.out.println("Delete");}}
TOKEN:{<Object: "object">{System.out.println("Object");}}
TOKEN:{<EspecificadorDeAlmacenamiento: "register" | "mutable" |"static">{System.out.println("EspecificadorDeAlmacenamiento ("+image+") ");}}
TOKEN:{<Super: "super">{System.out.println("Super");}}
TOKEN:{<Let: "let">{System.out.println("Let");}}
TOKEN:{<Import: "import">{System.out.println("Import");}}
TOKEN:{<Strictfp: "strictfp">{System.out.println("Strictfp");}}
TOKEN:{<Var: "var">{System.out.println("Var");}}
TOKEN:{<DescriptoresDeAcceso: "get" | "set">{System.out.println("DescriptoresDeAcceso ( "+image+") ");}}
TOKEN:{<Pass: "pass">{System.out.println("Pass");}}
TOKEN:{<Typeid: "typeid">{System.out.println("Typeid");}}
TOKEN:{<Typedef:"typedef">{System.out.println("Typedef");}}
TOKEN:{<Volatile: "volatile">{System.out.println("Volatile");}}
TOKEN:{<Print:"print">{System.out.println("Print");}}
TOKEN:{<Implements: "implements">{System.out.println("Implements");}}
TOKEN:{<Fixed: "fixed">{System.out.println("Fixed");}}
TOKEN:{<Instanceof: "instanceof">{System.out.println("Instanceof");}}

void Start(PrintStream printStream) throws NumberFormatException:
{Token t;}
{
(t = <IDENTIFIER> {printStream.println("Identificador ("+t.beginLine+","+t.beginColumn+")");}
	|t = <NUMBER>{printStream.println("Numero ("+t.beginLine+","+t.beginColumn+")");}
	| <Asignacion>|<OperadorAritmeticoBinario>|<Coma>|<Rango>|<DirectivasDePreprocesador>
	| <OperadoresLogicos>|<FuncionMatematica>|<OperadorRelacional>|<Parentesis>
	| <Corchete>|<Comentario>|<OperadorAritmetico>|<Llaves>|<ReferenciasPunteros>
	| <SentenciaIF>|<FuncionesPredefinidas>|<ReferenciaApuntador>|<TipoDeDato>
  | <AccesoAElementos> | <FinDeLinea> | <Comillas> |<Estructura> | <Using> | <Extends>
	| <Package> | <Global> | <Join>| <Lock>| <ImportarExportarFunciones> | <Noreturn>
	| <Def> | <Del> | <None> | <Elif> | <Nolocal> | <Equals> | <OperadorDeConversion> | <Delete> | <Object>
	| <EspecificadorDeAlmacenamiento> | <Super> | <Let> | <Import> | <Strictfp> | <Var> | <DescriptoresDeAcceso>
	| <Pass> | <Typeid> | <Typedef> | <Volatile> | <Print> | <Implements> | <Fixed> | <Instanceof> | <Dllexport> | <Dllimport> | <Extern>)*
	<EOF>
}
