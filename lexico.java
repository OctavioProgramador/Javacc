/* Generated By:JavaCC: Do not edit this line. lexico.java */
        import java.io.PrintStream;
        import java.util.ArrayList;
        class lexico implements lexicoConstants {
                public static void main (String [] args)
                throws ParseException, TokenMgrError{
                        lexico parser = new lexico( System.in);
                        parser.Start(System.out); }

  final public void Start(PrintStream printStream) throws ParseException, NumberFormatException {
        Token t;
        ArrayList<String> tabla;
        tabla = new ArrayList<String>();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Asignacion:
      case OperadorRelacional:
      case Parentesis:
      case Corchete:
      case Comentario:
      case OperadorAritmetico:
      case OperadorAritmeticoBinario:
      case FuncionMatematica:
      case OperadoresLogicos:
      case Llaves:
      case ReferenciasPunteros:
      case NUMBER:
      case Coma:
      case Rango:
      case DirectivasDePreprocesador:
      case SentenciaIF:
      case FuncionesPredefinidasFuncionales:
      case FuncionesPredefinidasIterativas:
      case ReferenciaApuntador:
      case TipoDeDato:
      case AccesoAElementos:
      case FinDeLinea:
      case Comillas:
      case Return:
      case OfExpresionCase:
      case PartesExpresionLet:
      case ClasesPredefinidas:
      case DeclaracionDeTipos:
      case ExpresionWhere:
      case ExpresionDeConversion:
      case InterrupcionDeProcesos:
      case ComponentesSentenciaCase:
      case ComprobacionDeDesbordamiento:
      case DeclaracionDeClase:
      case ModificadorDeTipo:
      case DeclaracionEnumeracion:
      case DeclaracionDeEvento:
      case OperacionesDeConversion:
      case ValorBooleano:
      case Ciclos:
      case ModificadorDeParametro:
      case ProductorDeGeneradores:
      case SentenciaUsing:
      case EspacioDeNombre:
      case ModificadorDeclaracionMiembro:
      case ValorNulo:
      case TamanoDeTipo:
      case Estructura:
      case Extends:
      case Package:
      case Global:
      case Join:
      case Lock:
      case Noreturn:
      case Def:
      case Del:
      case None:
      case Elif:
      case Nolocal:
      case Equals:
      case OperadorDeConversion:
      case Delete:
      case Object:
      case Super:
      case Import:
      case Strictfp:
      case Var:
      case DescriptoresDeAcceso:
      case Pass:
      case Typeid:
      case Typedef:
      case Volatile:
      case Print:
      case Implements:
      case Fixed:
      case Instanceof:
      case EspecificadorDeAlmacenamiento:
      case ModificadorSoloLectura:
      case Main:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        t = jj_consume_token(IDENTIFIER);
                String palabra = t.image;
                int i = 0;
                for (; i < tabla.size(); i++)
                {
                        if(palabra.equals(tabla.get(i)))
                        {
                                break;
                        }
                }
                if(tabla.size() == i){
                        tabla.add(palabra);
                }
                System.out.println("Identificador ("+Integer.toString(i)+")");
        break;
      case NUMBER:
        jj_consume_token(NUMBER);
        break;
      case Asignacion:
        jj_consume_token(Asignacion);
        break;
      case OperadorAritmeticoBinario:
        jj_consume_token(OperadorAritmeticoBinario);
        break;
      case Coma:
        jj_consume_token(Coma);
        break;
      case Rango:
        jj_consume_token(Rango);
        break;
      case DirectivasDePreprocesador:
        jj_consume_token(DirectivasDePreprocesador);
        break;
      case OperadoresLogicos:
        jj_consume_token(OperadoresLogicos);
        break;
      case FuncionMatematica:
        jj_consume_token(FuncionMatematica);
        break;
      case OperadorRelacional:
        jj_consume_token(OperadorRelacional);
        break;
      case Parentesis:
        jj_consume_token(Parentesis);
        break;
      case Corchete:
        jj_consume_token(Corchete);
        break;
      case Comentario:
        jj_consume_token(Comentario);
        break;
      case OperadorAritmetico:
        jj_consume_token(OperadorAritmetico);
        break;
      case Llaves:
        jj_consume_token(Llaves);
        break;
      case ReferenciasPunteros:
        jj_consume_token(ReferenciasPunteros);
        break;
      case SentenciaIF:
        jj_consume_token(SentenciaIF);
        break;
      case FuncionesPredefinidasFuncionales:
        jj_consume_token(FuncionesPredefinidasFuncionales);
        break;
      case FuncionesPredefinidasIterativas:
        jj_consume_token(FuncionesPredefinidasIterativas);
        break;
      case ReferenciaApuntador:
        jj_consume_token(ReferenciaApuntador);
        break;
      case TipoDeDato:
        jj_consume_token(TipoDeDato);
        break;
      case AccesoAElementos:
        jj_consume_token(AccesoAElementos);
        break;
      case FinDeLinea:
        jj_consume_token(FinDeLinea);
        break;
      case ValorNulo:
        jj_consume_token(ValorNulo);
        break;
      case ModificadorDeclaracionMiembro:
        jj_consume_token(ModificadorDeclaracionMiembro);
        break;
      case EspacioDeNombre:
        jj_consume_token(EspacioDeNombre);
        break;
      case SentenciaUsing:
        jj_consume_token(SentenciaUsing);
        break;
      case ProductorDeGeneradores:
        jj_consume_token(ProductorDeGeneradores);
        break;
      case ModificadorDeParametro:
        jj_consume_token(ModificadorDeParametro);
        break;
      case Ciclos:
        jj_consume_token(Ciclos);
        break;
      case ValorBooleano:
        jj_consume_token(ValorBooleano);
        break;
      case OperacionesDeConversion:
        jj_consume_token(OperacionesDeConversion);
        break;
      case DeclaracionDeEvento:
        jj_consume_token(DeclaracionDeEvento);
        break;
      case DeclaracionEnumeracion:
        jj_consume_token(DeclaracionEnumeracion);
        break;
      case ModificadorDeTipo:
        jj_consume_token(ModificadorDeTipo);
        break;
      case DeclaracionDeClase:
        jj_consume_token(DeclaracionDeClase);
        break;
      case ComprobacionDeDesbordamiento:
        jj_consume_token(ComprobacionDeDesbordamiento);
        break;
      case ComponentesSentenciaCase:
        jj_consume_token(ComponentesSentenciaCase);
        break;
      case InterrupcionDeProcesos:
        jj_consume_token(InterrupcionDeProcesos);
        break;
      case ExpresionDeConversion:
        jj_consume_token(ExpresionDeConversion);
        break;
      case ExpresionWhere:
        jj_consume_token(ExpresionWhere);
        break;
      case DeclaracionDeTipos:
        jj_consume_token(DeclaracionDeTipos);
        break;
      case ClasesPredefinidas:
        jj_consume_token(ClasesPredefinidas);
        break;
      case PartesExpresionLet:
        jj_consume_token(PartesExpresionLet);
        break;
      case OfExpresionCase:
        jj_consume_token(OfExpresionCase);
        break;
      case Return:
        jj_consume_token(Return);
        break;
      case Comillas:
        jj_consume_token(Comillas);
        break;
      case Estructura:
        jj_consume_token(Estructura);
        break;
      case Extends:
        jj_consume_token(Extends);
        break;
      case Package:
        jj_consume_token(Package);
        break;
      case Global:
        jj_consume_token(Global);
        break;
      case Join:
        jj_consume_token(Join);
        break;
      case Lock:
        jj_consume_token(Lock);
        break;
      case Noreturn:
        jj_consume_token(Noreturn);
        break;
      case Def:
        jj_consume_token(Def);
        break;
      case Del:
        jj_consume_token(Del);
        break;
      case None:
        jj_consume_token(None);
        break;
      case Elif:
        jj_consume_token(Elif);
        break;
      case Nolocal:
        jj_consume_token(Nolocal);
        break;
      case Equals:
        jj_consume_token(Equals);
        break;
      case OperadorDeConversion:
        jj_consume_token(OperadorDeConversion);
        break;
      case Delete:
        jj_consume_token(Delete);
        break;
      case Object:
        jj_consume_token(Object);
        break;
      case EspecificadorDeAlmacenamiento:
        jj_consume_token(EspecificadorDeAlmacenamiento);
        break;
      case Super:
        jj_consume_token(Super);
        break;
      case Import:
        jj_consume_token(Import);
        break;
      case Strictfp:
        jj_consume_token(Strictfp);
        break;
      case Var:
        jj_consume_token(Var);
        break;
      case DescriptoresDeAcceso:
        jj_consume_token(DescriptoresDeAcceso);
        break;
      case Pass:
        jj_consume_token(Pass);
        break;
      case Typeid:
        jj_consume_token(Typeid);
        break;
      case Typedef:
        jj_consume_token(Typedef);
        break;
      case Volatile:
        jj_consume_token(Volatile);
        break;
      case Print:
        jj_consume_token(Print);
        break;
      case Main:
        jj_consume_token(Main);
        break;
      case Implements:
        jj_consume_token(Implements);
        break;
      case Fixed:
        jj_consume_token(Fixed);
        break;
      case Instanceof:
        jj_consume_token(Instanceof);
        break;
      case TamanoDeTipo:
        jj_consume_token(TamanoDeTipo);
        break;
      case ModificadorSoloLectura:
        jj_consume_token(ModificadorSoloLectura);
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(0);
  }

  /** Generated Token Manager. */
  public lexicoTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[2];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xffffff00,0xffffff00,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x7f3fffff,0x7f3fffff,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0xd3fffffc,0xd3fffffc,};
   }

  /** Constructor with InputStream. */
  public lexico(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public lexico(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new lexicoTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public lexico(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new lexicoTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public lexico(lexicoTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(lexicoTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[96];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 2; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 96; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

        }
