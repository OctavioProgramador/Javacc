options {
	STATIC = false;
}

PARSER_BEGIN(lexico)
	import java.io.PrintStream;
	import java.util.ArrayList;
	class lexico {
		public static void main (String [] args)
		throws ParseException, TokenMgrError{
			lexico parser = new lexico( System.in);
			parser.Start(System.out);
		 }
	}
PARSER_END(lexico)

//Espacios en blanco
SKIP : { "\t"| "\r" | "\r\n" | "\n" | " "}
//Comentarios
SKIP : { < Comentario: ( "/*" (~[])* "*/" ) | ( "//"( ~["\n"])*"\n") > } 
/*Definiciones regulares*/
TOKEN : { < #WORD : ((["a"-"z"]|["A"-"Z"]))+ > } 
TOKEN : { < #SPECIAL : "_" | "@"   > }
/*Componentes lexicos*/	
TOKEN : { < Asignacion: "="> {System.out.println("Asignacion");}} //1
TOKEN : { < OperadorRelacional: "==" | "!="  | ">"  | "<"  | "=>" |  "<=" >  //2
	{System.out.println("OperadorRelacional ("+image+")");}} 
TOKEN : { < ParentesisIzq: "(" >{System.out.println("Parentesis izquierdo");}} //3 
TOKEN : { < ParentesisDer:  ")" > {System.out.println("Parentesis derecho");}} //3 
TOKEN : { < CorcheteIzq : "[" >{System.out.println("Corchete Izquierdo");}} //4 
TOKEN : { < CorcheteDer : "]" >{System.out.println("Corchete Derecho");}}
//TOKEN : { < Comentario: "/*" | "*/" |  "//"> {System.out.println("Comentario ("+image+")");}} //5
TOKEN : { < OperadorAritmeticoUnario: "++" | "--" > {System.out.println("OperadorAritmeticoUnario ("+image+")");}} //6
TOKEN : { < OperadorAritmeticoBinario :  "+" | "-" | "*" | "/" | "*=" | "+=" | "-=" | "/=" >  
	{System.out.println("OperadorAritmeticoBinario ("+image+")");}} //7
TOKEN : { < FuncionMatematica : "sqrt" | "abs"> {System.out.println("FuncionMatematica ("+image+")");}} //8
TOKEN : { < OperadoresLogicos : "&&" | "||" | "XOR" > 
	{System.out.println("OperadoresLogicos ("+image+")");}} //9
TOKEN : { < LlaveIzq : "{" > {System.out.println("Llave izquierda");}} //10
TOKEN : { < LlaveDer : "}" > {System.out.println("Llave derecha");}} //10
TOKEN : { < ReferenciasPunteros : "this" | "&" > {System.out.println("ReferenciasPunteros ("+image+")");}} //11
TOKEN : { < Number : (["0"-"9"])+ >{System.out.println("Numero");}  }
TOKEN : { < Coma : "," > {System.out.println("Coma");}} //12
TOKEN : { < Rango : ":" > {System.out.println("Rango");}} //13
TOKEN : { < DirectivasDePreprocesador : "#include"|"#endif" > 
	{System.out.println("DirectivasDePreprocesador ("+image+")");}} //14
TOKEN : { < DirectivaDefine : "#define" > {System.out.println("#define");}}
TOKEN : { < SentenciaIF : "if"> {System.out.println("SentenciaIf");}} //15
TOKEN : { < Else: "else"> {System.out.println("else");}}
TOKEN : { < FuncionesPredefinidasFuncionales : "how"|"map"|"zip"|"filter"|"foldr"|"foldl"|"lenght"|"head"|"fst"|"snd"|"tail"|"id"|"show"|"iter"|"next"|"list"|"tuple"|"max"|"min"|"values"|"dict"|"sum"|"sorted"|"any"|"all">{System.out.println("FuncionPredefinida ("+image+")");}} //16 Dividir mejor esta parte
TOKEN : { < FuncionesPredefinidasIterativas : "count"|"range"|"cycle"|"repeat"|"chain"|"tee"|"islice"|"filterfalse"|"takewhile" > { System.out.println("FuncionesPredefinidasIterativas ("+image+")");}}
TOKEN: {<ReferenciaApuntador: "&" | "this">{System.out.println("ReferenciaApuntador");}} //16
TOKEN: {<TipoDeDato: "int" | "char" | "string" | "bool" | "decimal" | "void" | "long"| "double" | "data" | "function" | "float" | "byte" | "sbyte" | "short" | "ushort" | "int16" | "int64" | "ulong" | "uint" | "nint" > {System.out.println("TipoDeDato ("+image+")");}} //17
TOKEN: {<AccesoAElementos: "." | "->">{System.out.println("AccesoAElementos -> " + image);}} //18
TOKEN: {<FinDeLinea: ";">{System.out.println("FinDeLinea");} } //19
TOKEN: {<Comillas: "\""| "\'">{System.out.println("Comillas");}} //20
TOKEN : { < String: "\"" (~["\""])* "\""  >{System.out.println("String ("+image+")");}}
TOKEN : {<Return: "return">{System.out.println("return");}} //22
TOKEN : {<Of: "of">{System.out.println("OfExpresionCase");}} //23
TOKEN : {<Let: "let" >{System.out.println("in");}} //24
TOKEN : {<In: "in" >{System.out.println("let ");}}
TOKEN : {<ClasesPredefinidas: "BinaryTree"|"vector"|"Leaf"|"Branch" >{System.out.println("ClasesPredefinidas ("+image+")");}} //25
TOKEN : {<DeclaracionDeTipos: "newtype" > {System.out.println("DeclaracionDeTipos");}} //26
TOKEN : {<ExpresionWhere : "where" > {System.out.println("ExpresionWhere");}} //27
TOKEN : {<ExpresionDeConversion: "as" >{System.out.println("as");}} //30
//TOKEN : {<InterrupcionDeProcesos: "continue" | "break" >{System.out.println("InterrupcionDeProcesos ("+image+")");}} //31
TOKEN : {<Break: "break"> {System.out.println("Break");}}
TOKEN : {<Continue: "continue"> {System.out.println("Continue");}}
// TOKEN : {<ComponentesSentenciaCase: "switch"|"case"|"default" >{System.out.println("ComponentesSentenciaCase("+image+")");}} //32
TOKEN : { <Case: "case" > {System.out.println("Case");}}// cambio hay que ver donde poner el switch
TOKEN : { <Switch: "switch" > {System.out.println("Switch");}}// No pude hacer el case como lo planee
TOKEN : { <CasoDefault: "default">{System.out.println("Default");}}
TOKEN : { <ComprobacionDeDesbordamiento: "check "|"unchecked" >{System.out.println("ComprobacionDeDesbordamiento("+image+")");}} //34
TOKEN : {<DeclaracionDeClase: "class" >{System.out.println("DeclaracionDeClase");}} //35
TOKEN : {<ModificadorDeTipo: "const"|"signed"|"unsigned" >{System.out.println("ModificadorDeTipo("+image+")");}} //36
TOKEN : {<DeclaracionEnumeracion: "enum">{System.out.println("DeclaracionEnumeracion");}} //37
//TOKEN : {<DeclaracionDeEvento: "event">{System.out.println("DeclaracionDeEvento");}} //38
TOKEN : {<Read: "read">{System.out.println("Read");}} //38
TOKEN : {<OperacionesDeConversion: "explicit"|"implicit"|"operator">{System.out.println("OperacionesDeConversion("+image+")");}} // 39
TOKEN : {<ValorBooleano: "true"|"false">{System.out.println("ValorBooleano("+image+")");}} // 40
// TOKEN : {<Ciclos: "do"|" while"|"for"|"foreach">{System.out.println("Ciclo("+image+")");}} // 41
TOKEN : {<For: "for">{System.out.println("For");}}
TOKEN : {<Foreach: "foreach">{System.out.println("Foreach");}}
TOKEN : {<While: "while">{System.out.println("While");}}
TOKEN : {<Do: "do">{System.out.println("Do");}}
TOKEN : {<ModificadorDeParametro: "in"|"out"|"params"|"ref" >{System.out.println("ModificadorDeParametro("+image+")");}} // 42
TOKEN : {<ProductorDeGeneradores: "yield">{System.out.println("ProductorDeGeneradores");}} // 43
TOKEN : {<Using: "using">{System.out.println("SentenciaUsing");}} // 44
TOKEN : {<EspacioDeNombre: "namespace">{System.out.println("EspacioDeNombre");}} // 45
TOKEN : {<ModificadorDeclaracionMiembro: "new"|"transient">{System.out.println("ModificadorDeclaracionMiembro("+image+")");}} // 46
TOKEN : {<ValorNulo: "null">{System.out.println("ValorNulo");}} // 47
TOKEN : {<ModificadorDeMetodo: "override">{System.out.println("ModificadorDeMetodo");}} // 48
TOKEN : {<ModificadorDeAcceso: "public"|"private"|"protected"|"friend" >{System.out.println("ModificadorDeAcceso("+image+")");}} // 49
TOKEN : {<TamanoDeTipo: "sizeof">{System.out.println("TamanoDeTipo");}} // 52
TOKEN: { <Estructura: "struct">{System.out.println("Estructura");}}
TOKEN: { <Extends:"extends">{System.out.println("extends");}}
TOKEN: { <Package:"package">{System.out.println("Package");}}
TOKEN: { <Global:"global">{System.out.println("Global");}}
TOKEN: { <Join:"join">{System.out.println("Join");}}
TOKEN: { <Lock:"lock">{System.out.println("Lock");}}
TOKEN: { <Dllexport:"dllexport" >{System.out.println("Dllexport");}}
TOKEN: { <Dllimport: "dllimport" >{System.out.println("Dllimport");}}
TOKEN: { <Extern: "extern">{System.out.println("extern");}}
TOKEN: { <Noreturn:"noreturn">{System.out.println("noreturn");}}
TOKEN: { <Def:"def">{System.out.println("Def");}}
TOKEN: { <Del: "del">{System.out.println("Del");}}
TOKEN: { <None: "none">{System.out.println("None");}}
TOKEN: { <Elif: "elif">{System.out.println("Elif");}}
TOKEN: { <Nolocal: "nonlocal">{System.out.println("Nonlocal");}}
TOKEN: { <Equals: "equals">{System.out.println("Equals");}}
TOKEN: { <OperadorDeConversion: "reinterpret_cast" | "dynamic_cast">{System.out.println("OperadorDeConversion ( "+image+") ");}}
TOKEN: { <Delete: "delete">{System.out.println("Delete");}}
TOKEN: { <Object: "object">{System.out.println("Object");}}
TOKEN: { <Super: "super">{System.out.println("Super");}}
TOKEN: { <Import: "import">{System.out.println("Import");}}
TOKEN: { <Strictfp: "strictfp">{System.out.println("Strictfp");}}
TOKEN: { <Var: "var">{System.out.println("Var");}}
TOKEN: { <DescriptoresDeAcceso: "get" | "set">{System.out.println("DescriptoresDeAcceso ( "+image+") ");}}
TOKEN: { <Pass: "pass">{System.out.println("Pass");}}
TOKEN: { <Typeid: "typeid">{System.out.println("Typeid");}}
TOKEN: { <Typedef:"typedef">{System.out.println("Typedef");}}
TOKEN: { <Volatile: "volatile">{System.out.println("Volatile");}}
TOKEN: { <Print:"print">{System.out.println("Print");}}
TOKEN: { <Implements: "implements">{System.out.println("Implements");}}
TOKEN: { <Fixed: "fixed">{System.out.println("Fixed");}}
TOKEN: { <Instanceof: "instanceof">{System.out.println("Instanceof");}}
TOKEN: { <EspecificadorDeAlmacenamiento: "register" | "mutable" |"static">{System.out.println("EspecificadorDeAlmacenamiento ("+image+") ");}}
TOKEN : { < ModificadorAbstract : "abstract" >{System.out.println("ModificadorAbstract");}}
TOKEN : { < DeclaracionClaseSellada : "sealed" >{System.out.println("sealed");}}
TOKEN : { < ModificadorSoloLectura : "readonly" >{System.out.println("readonly");}}
//TOKEN : { < ManejoDeExcepciones : "try"|"catch"|"finally"|"throw"|"throws" >{System.out.println("ManejoDeExcepciones ("+image+")");}} 
TOKEN : { < DeclaracionTry : "try" > {System.out.println("Declaracion Try");}}
TOKEN : { < DeclaracionCatch : "catch" > {System.out.println("Declaracion Catch");}}
/*Identificador*/
TOKEN: {<Main: "main">{System.out.println("Main");}}
TOKEN : { < Id : (<WORD>)+(<Number>|<Number>|<SPECIAL>)* >{
	//Logica del diccionario de identificadores
	palabra = image.toString();
	i = 0;
	for (; i < tabla.size(); i++)
	{
		if(palabra.equals(tabla.get(i)))
		{
			break;
		}
	}
	if(tabla.size() == i){
		tabla.add(palabra);
	}
	System.out.println("Identificador ("+Integer.toString(i)+")");
}}

TOKEN_MGR_DECLS : {
	//Variables del diccionario de indentificadores
	public String palabra = "";
	public ArrayList<String> tabla = new ArrayList<String>();
	public	int i = 0;
}


void Start(PrintStream printStream) throws NumberFormatException:
{
	/*
	Token t;
	ArrayList<String> tabla;
	tabla = new ArrayList<String>();
	*/
}
{
	/*
	(t = <Id> {
		String palabra = t.image;
		int i = 0;
		for (; i < tabla.size(); i++)
		{
			if(palabra.equals(tabla.get(i)))
			{
				break;
			}
		}
		if(tabla.size() == i){
			tabla.add(palabra);
		}
		System.out.println("Identificador ("+Integer.toString(i)+")");
	}
	/*
	|<NUMBER> |  <Asignacion> | <OperadorAritmeticoBinario> | <Coma> | <Rango> 
	| <DirectivasDePreprocesador> | <OperadoresLogicos> | <FuncionMatematica> 
	| <OperadorRelacional> | <Parentesis> | <Corchete> | <Comentario> 
	| <OperadorAritmetico> | <Llaves> | <ReferenciasPunteros> | <SentenciaIF> 
	| <FuncionesPredefinidasFuncionales> | <FuncionesPredefinidasIterativas> 
	| <ReferenciaApuntador> | <TipoDeDato> | <AccesoAElementos> | <FinDeLinea> 
	| <ValorNulo> | <ModificadorDeclaracionMiembro> | <EspacioDeNombre> 
	| <SentenciaUsing> | <ProductorDeGeneradores> | <ModificadorDeParametro> 
	| <Ciclos> | <ValorBooleano> | <OperacionesDeConversion> 
	| <DeclaracionDeEvento>	| <DeclaracionEnumeracion> | <ModificadorDeTipo> 
	| <DeclaracionDeClase> | <ComprobacionDeDesbordamiento> 
	| <ComponentesSentenciaCase> | <InterrupcionDeProcesos> 
	| <ExpresionDeConversion> | <ExpresionWhere> | <DeclaracionDeTipos> 
	| <ClasesPredefinidas> | <PartesExpresionLet> | <OfExpresionCase> 
	| <Return>| <Comillas> | <Estructura> | <Extends> | <Package> | <Global> 
	| <Join>| <Lock>| <Noreturn> | <Def> | <Del> 
	| <None> | <Elif> | <Nolocal> | <Equals> | <OperadorDeConversion> | <Delete> | <Object>
	| <EspecificadorDeAlmacenamiento> | <Super> | <Import> | <Strictfp> | <Var>
	| <DescriptoresDeAcceso> | <Pass> | <Typeid> | <Typedef> | <Volatile> | <Print>
	| <Implements> | <Fixed> | <Instanceof> | <TamanoDeTipo> | <ModificadorSoloLectura>| <ManejoDeExcepciones>
	| <ModificadorDeMetodo>| <ModificadorDeAcceso> | <DeclaracionClaseSellada> | <Dllexport>
	| <Dllimport> | <Extern> | <ModificadorAbstract>| <Main>)*
          */
	Programa()
	<EOF>
}

// Gramatica
void Programa():
{}
{
	/*(ComentarioMultilinea())**/ (DirectivaReferencia())* (ExportarDll() | Clase() | Funcion() | Metodo() | DeclaracionEstructura() 
	|ExpresionFuncional() | Enumeracion() | DeclaracionVariableGlobal()/* | ComentarioMultilinea() */
	|SentenciaNamespace()| ImportarDLL())* FuncionMain() /*(ComentarioMultilinea())?*/
}
void DirectivaReferencia():
{}
{
	<DirectivasDePreprocesador> <Id> <AccesoAElementos> <Id> 
}

void ExportarDll():
{}
{
	<DirectivaDefine> <Id> <ParentesisIzq> <Dllexport> <ParentesisDer> <Rango> (Sentencia())+ ExpresionReturn()  <FinDeLinea>

}

void Clase():
{}
{
	<DeclaracionDeClase> <Id> (<Extends> <Id>)? <Rango> (BloqueModificadorAcceso() | Constructor())+ <FinDeLinea>
}
void BloqueModificadorAcceso():
{}
{
	<ModificadorDeAcceso> <LlaveIzq> ( FuncionODeclaracion() | Metodo() )+ <LlaveDer>
}
void FuncionODeclaracion():
{}
{
	<TipoDeDato> ( <ModificadorDeTipo> <Id> <FinDeLinea>| <Id> (FuncionSinNombreNiTipo()|<FinDeLinea>)) 
}
void FuncionSinNombreNiTipo():
{}
{
	Parametros() <Rango> ( Sentencia() )* ExpresionReturn() <FinDeLinea> 
}
void Constructor():
{}
{
	Encabezado() <Rango> ( Sentencia() | ReferenciaSuperclaseAtributo())* <FinDeLinea>
}
void DeclaracionEstructura():
{}
{
	<Estructura> <Id> <Rango> (DeclaracionVariable() <FinDeLinea>)+ <FinDeLinea>
}
void InstanciaObjeto():
{}
{
	<ModificadorDeclaracionMiembro> (<Id> | <ClasesPredefinidas>) <ParentesisIzq> ( IngresarParametros()) <ParentesisDer>
}
// Funciones
void Encabezado():
{}
{
	<Id> Parametros()
}

void IngresarParametros():
{}
{
	<Id> (FuncionOArreglo2())? (<Coma> <Id> (FuncionOArreglo2())?)*
}
void Parametros():
{}
{
	(  VariableParametro() (<Coma> VariableParametro())* )?
}

void VariableParametro():
{}
{
	( <ReferenciasPunteros> )? DeclaracionVariable()
}

void DeclaracionVariable():
{}
{
	<TipoDeDato> ( <ModificadorDeTipo> )? <Id> 
}

void Sentencia():
{}
{
	( (ConversionReinterpretarODecVar() | SentenciaAsignacion() | Ciclo() 
	| Condicional() | SalidaEnPantalla() | DeclaracionArreglo() 
	| SentenciasId() | VariableNoLocal() | InstanciaObjeto() 
	| InicializacionArreglo() | DeclaracionTryCatch() | ExpresionLetIn() 
	| ReferenciaNamespace()| RenombreDeTipo() | Lectura() ) <FinDeLinea> /*| ComentarioMultilinea()*/)
}

void Metodo():
{}
{
	Encabezado() <Rango> (Sentencia())* <FinDeLinea>
}

void InvocarMetodo():
{}
{
	<Id> InvocacionFuncion()
}

void Funcion():
{}
{
	<TipoDeDato> Encabezado() <Rango> (Sentencia())* ExpresionReturn() <FinDeLinea>
}
void FuncionMain():
{}
{
	<Main> <Rango> (SentenciaUsing())* (Sentencia())* <FinDeLinea>
}
void InvocacionFuncion():
{}
{
	<ParentesisIzq> IngresarParametros() <ParentesisDer>
}

//Cadenas//
/*void CadenaString():
{}
{
	<Comillas> ( <Id> )*  <Comillas>
}
*/
//Expresiones// 
void ExpresionReturn():
{}
{
	<Return> ExpresionGeneral() <FinDeLinea>
}
void ExpresionGeneral():
{}
{
	/*(<Parentesis> ExpresionGeneral() <Parentesis> 
	|<ValorBooleano> ParteDerExpBooleana()
	|<FuncionMatematica> <Parentesis> ExpresionAritmetica() <Parentesis> 
	|<Id> (FuncionOArreglo2()|<OperadorAritmeticoUnario>|AccesoEnumeracion())? (ParteDerExpBooleana()|ParteDerExpAritmeticaOString()|ParteDerComparacion())? 
	|<Number> (ParteDerExpAritmetica()|ParteDerComparacion())? 
	| CadenaString() ParteDerExpString() | ObtenerTamanoDeTipo())
	*/
	(<ParentesisIzq> ExpresionGeneral() <ParentesisDer> ( ParteDerExpAritmeticaOString() | ParteDerComparacion
	() | ParteDerExpBooleana() )?
	|<ValorBooleano> ParteDerExpBooleana()
	|ParteFuncionMatematicaExpresionGeneral() |ParteIdExpresionGeneral() |ParteNumeroExpresionGeneral()
	| <String> ParteDerExpString()|ObtenerTamanoDeTipo())
}
void ParteIdExpresionGeneral():
{}
{
	<Id> (ParteIdExpresionGeneralDer() (ParteIdExpresionGeneralIzq())? | ParteIdExpresionGeneralIzq())?
}

void ParteIdExpresionGeneralDer():
{}
{
	(FuncionOArreglo2()|<OperadorAritmeticoUnario>|AccesoEnumeracion())
}

void ParteIdExpresionGeneralIzq():
{}
{
	(ParteDerExpBooleana()|ParteDerExpAritmeticaOString()|ParteDerComparacion())
}

void ParteNumeroExpresionGeneral():
{}
{
	<Number> (ParteDerExpAritmetica()|ParteDerComparacion())?
}
void ParteFuncionMatematicaExpresionGeneral():
{}
{
	<FuncionMatematica> <ParentesisIzq> ExpresionAritmetica() <ParentesisDer>  
}
void ExpresionGeneralSinId():
{}
{
	(<ParentesisIzq> ExpresionGeneral() <ParentesisDer> ( ParteDerExpAritmeticaOString() | ParteDerComparacion
	() | ParteDerExpBooleana() )?
	|<ValorBooleano> ( ParteDerExpBooleana() )?
	|<FuncionMatematica> <ParentesisIzq> ExpresionAritmetica() <ParentesisDer> 
	|<Number> (ParteDerExpAritmetica()|ParteDerComparacion())? 
	| <String> ( ParteDerExpString())? | ObtenerTamanoDeTipo())
}
void ExpresionAritmetica():
{}
{
	(<ParentesisIzq> ExpresionAritmetica() <ParentesisDer>  
	|<FuncionMatematica> <ParentesisIzq> ExpresionAritmetica() <ParentesisDer> 
	|(<Id>(FuncionOArreglo2()|(<OperadorAritmeticoUnario>)?)|<Number>)) (ParteDerExpAritmetica())?

}

void ExpresionBooleana():
{}
{
	(<ParentesisIzq> ExpresionBooleana() <ParentesisDer> 
	|<Id> ((FuncionOArreglo2())(ParteDerExpBooleana()|ParteDerComparacion())? | ComprobacionDeTipoOClase()| (ParteDerExpBooleana()|ParteDerComparacion()))?
	|<ValorBooleano> (ParteDerExpBooleana())? )
}
void ExpresionString():
{}
{
	(<ParentesisIzq> ExpresionString() <ParentesisDer> 
	|<Id> (FuncionOArreglo2())? (ParteDerExpString())?
	|<String> (ParteDerExpString())? )
}
void ParteDerExpAritmetica():
{}
{
	<OperadorAritmeticoBinario> ExpresionAritmetica()
}
void ParteDerExpBooleana():
{}
{
	<OperadoresLogicos> ExpresionBooleana()
}
void ParteDerComparacion():
{}
{
	<OperadorRelacional> ExpresionAritmetica()
}
void ParteDerExpString():
{}
{
	<OperadorAritmeticoBinario> ExpresionString()
}
void ParteDerExpAritmeticaOString():
{}
{
	//<OperadorAritmeticoBinario> ( <Parentesis> ( ExpresionString() | ExpresionAritmetica() ) <Parentesis> | <Id> FuncionOArreglo() [ ( ParteDerExpString() | ParteDerExpAritmetica() ) ] | CadenaString() ( ParteDerExpString() )? | <Number> [  ParteDerExpAritmetica() ] )
	<OperadorAritmeticoBinario> ( <ParentesisIzq> ExpAritmeticaOString() <ParentesisDer> | ExpAritmeticaOString() )
}

// Se usa para reemplazar (ExpAritmetica|ExpString)
void ExpAritmeticaOString():
{}
{
	( <Id> ( FuncionOArreglo2() [ ParteDerExpAritmeticaOString() ] | ParteDerExpAritmeticaOString())?  | <String> ( ParteDerExpString() )? | <Number> [  ParteDerExpAritmetica() ] )  
}

void FuncionOArreglo2():
{}
{
	(AccesoAElementoArreglo() | InvocacionFuncion())
}
/*void FuncionOArreglo():
{}
{
	(AccesoAElementoArreglo() | InvocacionFuncion())?
}*/

void SentenciaAsignacion():
{}
{
	ExpresionGeneralSinId() <Asignacion> <Id> 
}

void DeclaracionVariableGlobal():
{}
{
	<Global> <Id> (<Rango> ExpresionAritmetica() <Rango> ) ? <FinDeLinea>
}
//Ciclos//
void Ciclo():
{}
{
	( CicloWhile() | CicloFor() | CicloForeach() | CicloDoWhile() )
}

void CicloFor():
{}
{
	<For> RangoNumerico() <Rango> (Sentencia())+   
}

void RangoNumerico():
{}
{
	<CorcheteIzq> ExpresionAritmetica() <Rango> ExpresionAritmetica() <CorcheteDer>
}
void CicloForeach():
{}
{
	<Foreach> <TipoDeDato> <Id> <Of> <Id> <Rango> (Sentencia())+ 
}

void CicloWhile():
{}
{
	<While> ExpresionBooleana() <Rango> (Sentencia())+ 
}

void CicloDoWhile():
{}
{
	<Do> <Rango> (Sentencia())+ <FinDeLinea> <While> <LlaveIzq> ExpresionBooleana() <LlaveDer> 
}

//Condicionales//
void Condicional():
{}
{
	(CondicionIf()| CondicionCase())
}

void CondicionIf():
{}
{
	<SentenciaIF> ExpresionBooleana() <Rango> (Sentencia())+ ( <Elif> ExpresionBooleana() <Rango> (Sentencia())+ )* (<Else> (Sentencia())+ )?
}

void CondicionCase():
{}
{
	<Switch> <Id> <Rango>  <Case> (CasoNormal() <Case>)+ ( CasoDefault())? 
}

void CasoNormal():
{}
{
	(<Id> | <Number> |<String> | <ValorBooleano> )<Rango> (Sentencia())* <Break>
}

void CasoDefault():
{}
{
	 <CasoDefault> <Rango> (Sentencia())* <Break> 
}

void SalidaEnPantalla():
{}
{
	<Print> ExpresionGeneral() 
}

void ReferenciaSuperclaseAtributo():
{}
{
	<Super> <AccesoAElementos> <Id> <FinDeLinea>
}

// Control de excepciones

void DeclaracionTryCatch():
{}
{
	SentenciaTry() SentenciaCatch()
}

void SentenciaTry():
{}
{
	<DeclaracionTry> <Rango> (Sentencia())+ <FinDeLinea> 
}

void SentenciaCatch():
{}
{
	<DeclaracionCatch> <Rango> (Sentencia())* 
}

//Arreglos
void DeclaracionArreglo():
{}
{
	SentenciaCorchetes() <Asignacion> <TipoDeDato> <Id> 
}

void SentenciaCorchetes():
{}
{
	<CorcheteIzq> <CorcheteDer> ( <CorcheteIzq> <CorcheteDer>)*
}

void AccesoAElementoArreglo():
{}
{
	<CorcheteIzq> ExpresionAritmetica() <CorcheteDer> <CorcheteIzq> ExpresionAritmetica() <CorcheteDer>
}

void InicializacionArreglo():
{}
{
	Arreglo() <Asignacion> <Id>
}

//No se puede asignar un arreglo vacio a una variable de tipo arreglo
void Arreglo():
{}
{
	<LlaveIzq> Vector() (<Rango> Vector())* <LlaveDer>
}

void Vector():
{}
{
	ElementosDeArreglo() (<Coma> ElementosDeArreglo() )* 
}

void ElementosDeArreglo():
{}
{
	(<Id> | Arreglo() | <Number> | <String>)
}

//Programacion Funcional
void ExpresionFuncional():
{}
{
	<Def> <Id> ( <Id> )* <Asignacion> CuerpoExpresionFuncional() <FinDeLinea>
}

void CuerpoExpresionFuncional():
{}
{
	( Lista() | <Id> ( <LlaveIzq> (<Id> ( <Coma> <Id>)* )?<LlaveDer>)? (ParteDerExpFun())? | ( <FuncionesPredefinidasFuncionales> <LlaveDer> ExpresionFuncional() <LlaveIzq> (ParteDerExpFun())? | ForeachFuncional() ))
}

void ParteDerExpFun():
{}
{
	<OperadorAritmeticoBinario> CuerpoExpresionFuncional()
}

void ForeachFuncional():
{}
{
	<Foreach> <LlaveIzq> <Id> <In> CuerpoExpresionFuncional() <LlaveDer>
}

void Lista():
{}
{
	<CorcheteIzq> ExpresionAritmetica() <Rango> ExpresionAritmetica() <CorcheteDer>
}

//Expresion let in

void ExpresionLetIn():
{}
{
	<Let> ( <TipoDeDato> )? <Id> ( <Asignacion> ExpresionGeneral() )? ( <In> DefinicionLetIn() )? <FinDeLinea>
}

void DefinicionLetIn():
{}
{
	 ( <Id> <Asignacion>)+ <FinDeLinea>  (ExpresionGeneral())*
}

// Enumeracion

void Enumeracion():
{}
{
	<DeclaracionEnumeracion> <Id> <Rango> (<Id>|<String>) ( <Coma> (<Id>|<String> ))+ <FinDeLinea>
}

void AccesoEnumeracion():
{}
{
	 <AccesoAElementos> <Id>
}

//Comentarios

/*void ComentarioMultilinea():
{}
{
	<Comentario> (<Id>)+<Comentario>
}
*/
//Namespace

void SentenciaNamespace():
{}
{
	<EspacioDeNombre> <Id> <Rango> ( Clase() | Funcion() | Metodo() | DeclaracionEstructura() 
	|ExpresionFuncional())+ <FinDeLinea>
}

void ReferenciaNamespace():
{}
{
	<EspacioDeNombre> <Rango> <Rango> <Id> ( <ParentesisIzq> <ParentesisDer> | <Rango> (Sentencia())+ )
}

void SentenciaUsing ():
{}
{
	<Using> <EspacioDeNombre> <Id>
}

//Importacion de Dllexport
void ImportarDLL():
{}
{
	<Dllimport> <LlaveIzq> <Id> <LlaveDer> <FinDeLinea>
}

//Otras
void ObtenerTamanoDeTipo():
{}
{
	<TamanoDeTipo> <TipoDeDato>
}
void RenombreDeTipo():
{}
{
	<DeclaracionDeTipos> <TipoDeDato> <Rango> <Id>
}
void Conversion():
{}
{
	 <ExpresionDeConversion> <TipoDeDato>
}
void ComprobacionDeTipoOClase():
{}
{
	<Instanceof> (<Id> | <Estructura> | <TipoDeDato>)
}
void VariableNoLocal():
{}
{
	<Nolocal> <Id>
}
void Lectura():
{}
{
	<Read> <Id>
}
void ConversionReinterpretarODecVar():	
{}
{
	<TipoDeDato> ( <Id> (<Asignacion> <OperadorDeConversion> <ParentesisIzq> <Id> <ParentesisDer> )? | <ModificadorDeTipo> <Id> )
}

void SentenciasId():
{}
{
	<Id> (  Conversion() | <OperadorAritmeticoUnario> (ParteDerExpBooleana() | ParteDerExpAritmeticaOString() | ParteDerComparacion() )? | ( FuncionOArreglo2() | AccesoEnumeracion() )? (ParteDerExpBooleana() | ParteDerExpAritmeticaOString() | ParteDerComparacion() )? <Asignacion> <Id> )
}



// F I N
